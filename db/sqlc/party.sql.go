// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: party.sql

package db

import (
	"context"
)

const insertParty = `-- name: InsertParty :one
insert into pty_party (
    pty_partyref, 
    pty_category, 
    pty_longdesc, 
    pty_holiday, 
    pty_country, 
    pty_location, 
    pty_shrtdesc,
    pty_partynam1, 
    pty_partynam2, 
    pty_partynam3, 
    pty_active, 
    pty_verdat)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12 )
RETURNING pty_partyref, pty_category, pty_longdesc, pty_holiday, pty_country, pty_location, pty_shrtdesc, pty_partynam1, pty_partynam2, pty_partynam3, pty_active, pty_verdat
`

type InsertPartyParams struct {
	PtyPartyref  string `json:"pty_partyref"`
	PtyCategory  string `json:"pty_category"`
	PtyLongdesc  string `json:"pty_longdesc"`
	PtyHoliday   string `json:"pty_holiday"`
	PtyCountry   string `json:"pty_country"`
	PtyLocation  string `json:"pty_location"`
	PtyShrtdesc  string `json:"pty_shrtdesc"`
	PtyPartynam1 string `json:"pty_partynam1"`
	PtyPartynam2 string `json:"pty_partynam2"`
	PtyPartynam3 string `json:"pty_partynam3"`
	PtyActive    string `json:"pty_active"`
	PtyVerdat    string `json:"pty_verdat"`
}

func (q *Queries) InsertParty(ctx context.Context, arg InsertPartyParams) (PtyParty, error) {
	row := q.db.QueryRowContext(ctx, insertParty,
		arg.PtyPartyref,
		arg.PtyCategory,
		arg.PtyLongdesc,
		arg.PtyHoliday,
		arg.PtyCountry,
		arg.PtyLocation,
		arg.PtyShrtdesc,
		arg.PtyPartynam1,
		arg.PtyPartynam2,
		arg.PtyPartynam3,
		arg.PtyActive,
		arg.PtyVerdat,
	)
	var i PtyParty
	err := row.Scan(
		&i.PtyPartyref,
		&i.PtyCategory,
		&i.PtyLongdesc,
		&i.PtyHoliday,
		&i.PtyCountry,
		&i.PtyLocation,
		&i.PtyShrtdesc,
		&i.PtyPartynam1,
		&i.PtyPartynam2,
		&i.PtyPartynam3,
		&i.PtyActive,
		&i.PtyVerdat,
	)
	return i, err
}

const listParties = `-- name: ListParties :many
SELECT pty_partyref, pty_category, pty_longdesc, pty_holiday, pty_country, pty_location, pty_shrtdesc, pty_partynam1, pty_partynam2, pty_partynam3, pty_active, pty_verdat
FROM pty_party
LIMIT 1000
`

func (q *Queries) ListParties(ctx context.Context) ([]PtyParty, error) {
	rows, err := q.db.QueryContext(ctx, listParties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PtyParty
	for rows.Next() {
		var i PtyParty
		if err := rows.Scan(
			&i.PtyPartyref,
			&i.PtyCategory,
			&i.PtyLongdesc,
			&i.PtyHoliday,
			&i.PtyCountry,
			&i.PtyLocation,
			&i.PtyShrtdesc,
			&i.PtyPartynam1,
			&i.PtyPartynam2,
			&i.PtyPartynam3,
			&i.PtyActive,
			&i.PtyVerdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
